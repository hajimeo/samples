# NOTE:
#   This script uses the node's hostPath for sharing blobs, instead of the recommended NFS.
#
# COMMAND EXAMPLE:
#   cd ~/IdeaProjects/samples/kubernetes
#   # Below _DNS is only for my k8s env (don't forget to update /etc/banner_add_hosts). _DB_USER can't contain '-' character.
#   export _NAMESPACE="sonatype-ha" _ID="nxrm3ha"
#   export _TAG="3.45.0" _RUNAS_USR=200 _DNS="192.168.1.31" _DB_HOST_PORT="192.168.1.31:5432" #_METALLB_IP="192.168.1.230"
#   export _BLOBS_PATH="/var/tmp/share/sonatype/${_ID}/blobs" _JDBC_URL="jdbc:postgresql://${_DB_HOST_PORT}/${_ID}" _DB_USER="${_ID}" _DB_PWD="${_ID}"
#
#  one time only preparation (*after* above "export")
#  - On *K8s node*, which will be used for blob stores:
#     mkdir -v -p -m 777 ${_BLOBS_PATH}
#  - With psql, create DB user and database:
#     #source ../bash/utils.sh && source ../bash/utils_db.sh && _postgresql_create_dbuser "${_ID}"
#     sudo -u postgres -i psql -c "CREATE USER ${_DB_USER} WITH LOGIN PASSWORD '${_DB_PWD}';"
#     sudo -u postgres -i psql -c "CREATE DATABASE ${_ID} WITH OWNER ${_DB_USER} ENCODING 'UTF8';"
#     # Also, don't forget updating pg_hba.conf
#  - Create a namespace:
#     kubectl create namespace ${_NAMESPACE}
#  - Create a secret for the license file:
#     kubectl -n ${_NAMESPACE} create secret generic sonatype-license --from-file sonatype-license.lic=/path/to/licenseFile
#  - Configure tls secret for Ingress
#     kubectl -n ${_NAMESPACE} create secret tls nexus-tls --key ~/IdeaProjects/samples/misc/standalone.localdomain.key --cert ~/IdeaProjects/samples/misc/standalone.localdomain.crt
#
#   #kubectl -n ${_NAMESPACE} delete secret ${_ID}-jdbc
#   #kubectl -n ${_NAMESPACE} create secret generic ${_ID}-jdbc --from-literal=db_user="${_DB_USER}" --from-literal=db_pwd="${_DB_PWD}" --from-literal=jdbc_url="${_JDBC_URL}"
#   eval "echo \"$(cat ./k8s-nxrm3-pg-ha.yaml | grep -v '^\s*#')\"" > /tmp/${_ID}.yaml
#   #kubectl -n ${_NAMESPACE} delete -f /tmp/${_ID}.yaml   # NOTE: This deletes PVC as well
#   kubectl -n ${_NAMESPACE} apply -f /tmp/${_ID}.yaml
#
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${_ID}-statefulset
  labels:
    app: ${_ID}
spec:
  serviceName: ${_ID}-statefulset-sn
  replicas: 1
  selector:
    matchLabels:
      app: ${_ID}
  template:
    metadata:
      labels:
        app: ${_ID}
    spec:
      #serviceAccountName: ${_ID}-statefulset-sa
      terminationGracePeriodSeconds: 120
      dnsPolicy: Default
      # NOTE: Without initContainers, it fails to start on Docker-Desktop
      initContainers:
        - name: my-customization
          securityContext:
            runAsUser: 0
          # NOTE: busybox does not have curl
          image: busybox:1.33.1
          #[ -d /nexus-data/blobs ] && [ ! -L /nexus-data/blobs ] && mv -v /nexus-data/blobs /nexus-data/blobs_orig;
          # NOTE: 'echo nameserver ...' line is my personal hack as i do not want to use coreDNS
          #       When recreating, please manually remove /nexus-data/etc/fabric/nexus-store.properties (because of HA) in case JDBC setting was changed.
          #       Also, it seems the exit code needs to be 0
          #       '/nexus-data/bin/tar' for broken kubectl cp from 3.42.0
          #       https://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/tar-1.30-5.el8.x86_64.rpm
          command: ['sh', '-c', 'id;[ -n "${_DNS}" ] && echo nameserver "${_DNS}" > /etc/resolv.conf; mkdir -v -p /nexus-data/etc/ssl; [ -s /nexus-data/etc/nexus.properties ] || chown -R -v ${_RUNAS_USR:-200}:${_RUNAS_USR:-200} /nexus-data; [ ! -d /nexus-data/bin ] && mkdir /nexus-data/bin; [ ! -f /nexus-data/bin/tar ] && wget -q https://github.com/hajimeo/samples/raw/master/misc/tar-1.30-5.el8.x86_64.bin -O /nexus-data/bin/tar && chmod -v a+x /nexus-data/bin/tar; echo "Completed."']
          volumeMounts:
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      containers:
        - name: ${_ID}-pod
          securityContext:
            runAsUser: ${_RUNAS_USR:-200}
          image: sonatype/nexus3:${_TAG:-latest}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              # Make sure blow works with INSTALL4J_ADD_VM_PARAMS
              cpu: "2"
              memory: "4G"
          ports:
            - containerPort: 8081
            #- containerPort: 8443
            - containerPort: 4999
            #- containerPort: 5000
          startupProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 120
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
            timeoutSeconds: 10
          livenessProbe:
            # Probably httpGet is better, but I don't want to see many lines in request.log
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 10
          env:
            - name: PATH
              value: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin/:/nexus-data/bin'
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_user
            - name: DB_PWD
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_pwd
            - name: JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: jdbc_url
            # NOTE: Should use 'true' (or remove) for the production for security
            - name: NEXUS_SECURITY_RANDOMPASSWORD
              value: 'false'
            # NOTE: install4jAddVmParams is wrong
            - name: INSTALL4J_ADD_VM_PARAMS
              # NOTE: In the datastore parameter, no schema specified, so will be public.
              #       The nexus.scripts.allowCreation shouldn't be used for production.
              #       Also, maybe using nexus.onboarding.enabled=false and nexus.skipDefaultRepositories=true (but HA doesn't do this anyway)?
              #       To enable HTTPS/SSL, prepare keystore.jks and append ',/nexus-data/etc/ssl/jetty-https.xml'
              value: '-XX:ActiveProcessorCount=2 -Xms1g -Xmx3g -XX:MaxDirectMemorySize=2g \
                -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \
                -Djava.util.prefs.userRoot=/nexus-data/javaprefs \
                -Dnexus.licenseFile=/etc/sonatype/sonatype-license.lic \
                -Dnexus.scripts.allowCreation=true \
                -Dnexus.jwt.enabled=true \
                -Dnexus.datastore.clustered.enabled=true \
                -Dnexus.datastore.enabled=true \
                -Dnexus.datastore.nexus.jdbcUrl=\${JDBC_URL} \
                -Dnexus.datastore.nexus.username=\${DB_USER} \
                -Dnexus.datastore.nexus.password=\${DB_PWD} \
                -Dnexus.datastore.nexus.maximumPoolSize=10 \
                -Dnexus.datastore.nexus.advanced=maxLifetime=600000 \
                -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
          volumeMounts:
            - name: sonatype-license-volume
              mountPath: /etc/sonatype
              readOnly: true
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      volumes:
        #kubectl -n sonatype create secret generic sonatype-license --from-file /path/to/licenseFile
        - name: sonatype-license-volume
          secret:
            secretName: sonatype-license
        - name: nexus-blobs-volume
          hostPath:
            path: ${_BLOBS_PATH%/}
            type: DirectoryOrCreate
  volumeClaimTemplates:
    - metadata:
        name: nexus-data-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        #storageClassName: "standard"
        resources:
          requests:
            storage: 4Gi  #20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ${_ID}-service
  labels:
    app: ${_ID}
spec:
  type: NodePort
  # For MetalLB
  #type: LoadBalancer
  #loadBalancerIP: ${_METALLB_IP}
  selector:
    app: ${_ID}
  ports:
    - name: nexus-webui-http
      protocol: TCP
      port: 8081
      targetPort: 8081
    - name: nexus-docker-http
      protocol: TCP
      port: 4999
      targetPort: 4999
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${_ID}-ingress
  labels:
    app: ${_ID}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    #nginx.ingress.kubernetes.io/session-cookie-name: "NXJWT"
    #nginx.ingress.kubernetes.io/session-cookie-expires: "1800"
    #nginx.ingress.kubernetes.io/session-cookie-max-age: "1800"
spec:
  # TODO: may need to use the existing ingress? (kubectl get ingressclass)
  ingressClassName: nexus-ingress
  tls:
    - hosts:
        - ${_ID}-k8s.standalone.localdomain
      secretName: nexus-tls
  rules:
    - host: ${_ID}-k8s.standalone.localdomain
      http:
        paths:
          - path: /
            backend:
              service:
                name: ${_ID}-service
                port:
                  number: 8081
            pathType: Prefix
    - host: ${_ID}-docker-k8s.standalone.localdomain
      http:
        paths:
          - path: /
            backend:
              service:
                name: ${_ID}-service
                port:
                  #number: 5000 # httpsPort
                  number: 4999 # httpPort
                  #number: 8081
            pathType: Prefix