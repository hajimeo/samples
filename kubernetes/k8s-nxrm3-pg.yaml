# NOTE:
#   This script uses the node's hostPath for sharing blobs, instead of the recommended NFS.
#
# COMMAND EXAMPLE:
#   cd ~/IdeaProjects/samples/kubernetes
#   # Below _DNS is only for my k8s env (don't forget to update /etc/banner_add_hosts). _DB_USER can't contain '-' character.
#   export _NAMESPACE="sonatype" _ID="nxrm3pg" _DNS="192.168.4.31" _DB_HOST_PORT="192.168.4.31:5432" #_TAG="3.65.0" _METALLB_IP="192.168.4.230"
#   export _BLOBS_PATH="/var/tmp/share/sonatype/${_ID}/blobs" _JDBC_URL="jdbc:postgresql://${_DB_HOST_PORT}/${_ID}?gssEncMode=disable" _DB_USER="${_ID}" _DB_PWD="${_ID}"
#
# ONE TIME ONLY preparation (*after* above "export")
#  - On *K8s node*, which will be used for blob stores:
#     mkdir -v -p -m 777 ${_BLOBS_PATH}
#  - With psql, create DB user and database:
#     #source ../bash/utils.sh && source ../bash/utils_db.sh && _postgresql_create_dbuser "${_ID}"
#     sudo -u postgres -i psql -c "CREATE USER ${_DB_USER} WITH LOGIN PASSWORD '${_DB_PWD}';"
#     sudo -u postgres -i psql -c "CREATE DATABASE ${_ID} WITH OWNER ${_DB_USER} ENCODING 'UTF8';"
#     # *ALSO*, don't forget updating pg_hba.conf
#  - Create a namespace:
#     kubectl create namespace ${_NAMESPACE}
#  - Create a secret for the license file:
#     kubectl -n ${_NAMESPACE} create secret generic sonatype-license --from-file sonatype-license.lic=$HOME/share/sonatype/sonatype-license.lic
#  - Configure tls secret for Ingress
#     kubectl -n ${_NAMESPACE} create secret tls nexus-tls --key ~/IdeaProjects/samples/misc/standalone.localdomain.key --cert ~/IdeaProjects/samples/misc/standalone.localdomain.crt
#   - Create a secret for JDBC
#   #kubectl -n ${_NAMESPACE} delete secret ${_ID}-jdbc
#   kubectl -n ${_NAMESPACE} create secret generic ${_ID}-jdbc --from-literal=db_user="${_DB_USER}" --from-literal=db_pwd="${_DB_PWD}" --from-literal=jdbc_url="${_JDBC_URL}"
#
#   eval "echo \"$(cat ./k8s-nxrm3-pg.yaml | grep -v '^\s*#')\"" > ./${_ID}.yaml
#   #kubectl -n ${_NAMESPACE} delete -f ./${_ID}.yaml   # NOTE: This deletes PVC as well
#   kubectl -n ${_NAMESPACE} apply -f ./${_ID}.yaml
#
---
# Using microk8s hostpath-storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${_ID}-data-pvc
  labels:
    app: ${_ID}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  #storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${_ID}-deployment
  labels:
    app: ${_ID}
spec:
  minReadySeconds: 180
  replicas: 1
  selector:
    matchLabels:
      app: ${_ID}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ${_ID}
    spec:
      # Not Orient, so 1 minute would be plenty for single node
      terminationGracePeriodSeconds: 60
      dnsPolicy: Default
      # NOTE: Without initContainers, it fails to start on Docker-Desktop
      initContainers:
        - name: my-customization
          securityContext:
            runAsUser: 0
          # NOTE: busybox does not have curl
          image: busybox:1.33.1
          #[ -d /nexus-data/blobs ] && [ ! -L /nexus-data/blobs ] && mv -v /nexus-data/blobs /nexus-data/blobs_orig;
          # NOTE: 'echo nameserver ...' line is my personal hack as i do not want to use coreDNS
          #       When recreating, please manually remove /nexus-data/etc/fabric/nexus-store.properties (because of HA) in case JDBC setting was changed.
          #       Also, it seems the exit code needs to be 0
          #       '/nexus-data/bin/tar' for broken kubectl cp from 3.42.0, and fixed from 3.53
          #       https://vault.centos.org/centos/8/BaseOS/x86_64/os/Packages/tar-1.30-5.el8.x86_64.rpm
          #       Can't use `-uid` in busybox
          command: ['sh', '-c', 'id;[ -n \"${_DNS}\" ] && echo nameserver \"${_DNS}\" > /etc/resolv.conf; mkdir -v -p /nexus-data/etc/ssl; chown -v ${_RUNAS_USR:-200}:${_RUNAS_USR:-200} /nexus-data; find /nexus-data -maxdepth 4 -type d ! -user 200 | xargs -P3 -I{} -t chown ${_RUNAS_USR:-200}:${_RUNAS_USR:-200} {}; [ ! -d /nexus-data/bin ] && mkdir /nexus-data/bin; [ ! -f /nexus-data/bin/tar ] && wget -q https://github.com/hajimeo/samples/raw/master/misc/tar-1.30-5.el8.x86_64.bin -O /nexus-data/bin/tar && chmod -v a+x /nexus-data/bin/tar; echo \"Completed.\"']
          volumeMounts:
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      containers:
        - name: ${_ID}-pod
          securityContext:
            runAsUser: ${_RUNAS_USR:-200}
          image: sonatype/nexus3:${_TAG:-latest}
          # expecting "latest" uses 'imagePullPolicy: Always' automatically
          #imagePullPolicy: IfNotPresent
          resources:
            requests:
              # Make sure blow works with INSTALL4J_ADD_VM_PARAMS
              cpu: '1'
              memory: '4G'
          ports:
            - containerPort: 8081
            #- containerPort: 8443
            - containerPort: 4999
            #- containerPort: 5000
            #- containerPort: 5005 # debugger
            #- containerPort: 9000 # jmx
          startupProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 120
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
            timeoutSeconds: 10
          livenessProbe:
            # Probably httpGet is better, but I don't want to see many lines in request.log
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 10
          env:
            - name: LC_ALL
              value: 'en_US.UTF-8'
            - name: LANG
              value: 'en_US.UTF-8'
            - name: PATH
              value: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin/:/nexus-data/bin'
            # TODO: NEXUS_DATASTORE_NEXUS_USERNAME and NEXUS_DATASTORE_NEXUS_PASSWORD do not work
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_user
            - name: DB_PWD
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_pwd
            - name: JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: jdbc_url
            # NOTE: Should use 'true' (or remove) for the production for security
            - name: NEXUS_SECURITY_RANDOMPASSWORD
              value: 'false'
            #- name: NEXUS_SECURITY_INITIAL_PASSWORD
            #  value: 'admin123'
            # NOTE: install4jAddVmParams is wrong
            - name: INSTALL4J_ADD_VM_PARAMS
              # NOTE: In the datastore parameter, no schema specified, so it will be public.
              #       Java 8v190 and older  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \
              #       The nexus.scripts.allowCreation shouldn't be used for production.
              #       Also, maybe using nexus.onboarding.enabled=false, nexus.skipDefaultRepositories=true, and nexus.blobstore.provisionDefaults (this also won't create default blobstore)
              #       To enable HTTPS/SSL, prepare keystore.jks and: append
              #  -Dssl.etc=/nexus-data/etc/ssl \
              #  -Dnexus-args=/opt/sonatype/nexus/etc/jetty/jetty.xml,/opt/sonatype/nexus/etc/jetty/jetty-http.xml,/nexus-data/etc/ssl/jetty-https.xml,/opt/sonatype/nexus/etc/jetty/jetty-requestlog.xml \
              # kubectl port-forward -n sonatype deployment/nxrm3pg-deployment 9000:9000
              value: '-XX:ActiveProcessorCount=1 -Xms2g -Xmx3g \
                -Dcom.redhat.fips=false \
                -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 \
                -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=9000 -Dcom.sun.management.jmxremote.rmi.port=9000 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=true -Djava.rmi.server.hostname=127.0.0.1 \
                -Djava.util.prefs.userRoot=/nexus-data/javaprefs \
                -Dnexus.licenseFile=/etc/sonatype/sonatype-license.lic \
                -Dnexus.scripts.allowCreation=true \
                -Dnexus.app.scan.enabled=true \
                -Dnexus.datastore.enabled=true \
                -Dnexus.datastore.nexus.jdbcUrl=\${JDBC_URL} \
                -Dnexus.datastore.nexus.username=\${DB_USER} \
                -Dnexus.datastore.nexus.password=\${DB_PWD} \
                -Dnexus.datastore.nexus.schema=${_DB_SCHEMA:-"public"} \
                -Dnexus.datastore.nexus.maximumPoolSize=10 \
                -Dnexus.datastore.nexus.advanced=maxLifetime=600000 \
                -Dnexus.datastore.nexus.advanced=leakDetectionThreshold=20000'
          volumeMounts:
            - name: sonatype-license-volume
              mountPath: /etc/sonatype
              readOnly: true
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      volumes:
        #kubectl -n sonatype create secret generic sonatype-license --from-file /path/to/licenseFile
        - name: sonatype-license-volume
          secret:
            secretName: sonatype-license
        # No strong reason, but I feel NOT specifying own persistent volume for /nexus-data (and let k8s chose the underline file system) might be appropriate for the /nexus-data.
        - name: nexus-data-volume
          persistentVolumeClaim:
            claimName: ${_ID}-data-pvc
        - name: nexus-blobs-volume
          hostPath:
            path: ${_BLOBS_PATH%/}
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: ${_ID}-service
  labels:
    app: ${_ID}
spec:
  type: NodePort
  # For MetalLB
  #type: LoadBalancer
  #loadBalancerIP: ${_METALLB_IP}
  selector:
    app: ${_ID}
  ports:
    - name: nexus-webui-http
      protocol: TCP
      port: 8081
      targetPort: 8081
    - name: nexus-docker-http
      protocol: TCP
      port: 4999
      targetPort: 4999