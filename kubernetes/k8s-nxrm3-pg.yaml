# NOTE:
#   This script uses the node's hostPath for sharing blobs, instead of the recommended NFS.
#
# PREPARATION:
#  - On K8s node: mkdir -m 777 ${_BLOBS_PATH}, which will be used for blob stores.
#  - Create a namespace:
#     kubectl create namespace "sonatype"
#  - Create a secret for the license file:
#     kubectl -n "sonatype" create secret generic sonatype-license --from-file sonatype-license.lic=/path/to/licenseFile
#  - On PostgreSQL server: source ./utils.sh && _postgresql_create_dbuser "${_ID}"
#  - Configure Ingress
#
# COMMAND EXAMPLE:
#   cd ~/IdeaProjects/samples/kubernetes
#   # Below _DNS is only for my k8s env (don't forget to update /etc/banner_add_hosts). _DB_USER can't contain '-' character.
#   export _ID="nxrm3pg" _TAG="3.40.1" _METALLB_IP="192.168.1.230" _RUNAS_USR=200 _DNS="192.168.1.31"
#   export _BLOBS_PATH="/var/tmp/share/sonatype/${_ID}/blobs" _DB_USER="${_ID}" _DB_PWD="${_ID}" _JDBC_URL="jdbc:postgresql://192.168.1.31:5432/${_ID}"
#   # Run the create secret commands if necessary
#   #kubectl -n "sonatype" delete secret ${_ID}-jdbc
#   #kubectl -n "sonatype" create secret generic ${_ID}-jdbc --from-literal=db_user=${_DB_USER} --from-literal=db_pwd=${_DB_PWD} --from-literal=jdbc_url=${_JDBC_URL}
#   eval "echo \"$(cat ./k8s-nxrm3-pg.yaml | grep -v '^\s*#')\"" > /tmp/${_ID}.yaml
#   #kubectl -n "sonatype" delete -f /tmp/${_ID}.yaml   # NOTE: This deletes PVC as well
#   kubectl -n "sonatype" apply -f /tmp/${_ID}.yaml
#
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nxrm3-pg-data-pvc
  labels:
    app: nxrm3-pg
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  #storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nxrm3-pg-deployment
  labels:
    app: nxrm3-pg
spec:
  minReadySeconds: 180
  replicas: 1
  selector:
    matchLabels:
      app: nxrm3-pg
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nxrm3-pg
    spec:
      terminationGracePeriodSeconds: 120
      dnsPolicy: Default
      # NOTE: Without initContainers, it fails to start on Docker-Desktop
      initContainers:
        - name: my-customization
          # NOTE: busybox does not have curl
          image: busybox:1.33.1
          #[ -d /nexus-data/blobs ] && [ ! -L /nexus-data/blobs ] && mv -v /nexus-data/blobs /nexus-data/blobs_orig;
          # NOTE: 'echo nameserver ...' line is my personal hack as i do not want to use coreDNS
          #       When recreating, remove /nexus-data/etc/fabric/nexus-store.properties in case JDBC setting was changed.
          #       Also, it seems the exit code needs to be 0
          #       '-Dapplication-port-ssl=8443' does not work
          command: ['sh', '-c', '[ -n "${_DNS:-127.0.0.1}" ] && echo nameserver "${_DNS:-127.0.0.1}" > /etc/resolv.conf; mkdir -v -p /nexus-data/etc/ssl; rm -f -v /nexus-data/etc/fabric/nexus-store.properties; [ -s /nexus-data/etc/nexus.properties ] || chown -R -v ${_RUNAS_USR:-200}: /nexus-data; grep -qE "^application-port-ssl" /nexus-data/etc/nexus.properties || echo "application-port-ssl:8443" > /nexus-data/etc/nexus.properties; echo "Completed."']
          volumeMounts:
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      containers:
        - name: nxrm3-pg-pod
          securityContext:
            runAsUser: ${_RUNAS_USR:-200}
          image: sonatype/nexus3:${_TAG:-latest}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              # Make sure blow works with INSTALL4J_ADD_VM_PARAMS
              cpu: "2"
              memory: "4G"
          ports:
            - containerPort: 8081
            - containerPort: 8443
            - containerPort: 4999
            - containerPort: 5000
          lifecycle:
            postStart:
              exec:
                # This is not perfect but busybox or alpine doesn't have curl
                command: ['/bin/sh', '-c', '[ -f /nexus-data/etc/ssl/keystore.jks ] || curl -sf -o /nexus-data/etc/ssl/keystore.jks -L https://github.com/hajimeo/samples/raw/master/misc/standalone.localdomain.jks & [ -f /nexus-data/etc/ssl/jetty-https.xml ] || cp -v -p /opt/sonatype/nexus/etc/jetty/jetty-https.xml /nexus-data/etc/ssl/;']
          livenessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 120
            successThreshold: 1
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 60
            timeoutSeconds: 10
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_user
            - name: DB_PWD
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: db_pwd
            - name: JDBC_URL
              valueFrom:
                secretKeyRef:
                  name: ${_ID}-jdbc
                  key: jdbc_url
            # NOTE: Should use 'true' (or remove) for the production for security
            - name: NEXUS_SECURITY_RANDOMPASSWORD
              value: 'false'
            # NOTE: install4jAddVmParams is wrong
            - name: INSTALL4J_ADD_VM_PARAMS
              # NOTE: In the datastore parameter, no schema specified, so will be public.
              #       The nexus.scripts.allowCreation shouldn't be used for production.
              #       Also, maybe using nexus.onboarding.enabled=false is better?
              value: '-XX:ActiveProcessorCount=2 -Xms2g -Xmx2g -XX:MaxDirectMemorySize=2g \
                -Djava.util.prefs.userRoot=/nexus-data/javaprefs \
                -Dnexus.licenseFile=/etc/sonatype/sonatype-license.lic \
                -Dnexus.scripts.allowCreation=true \
                -Dssl.etc=/nexus-data/etc/ssl \
                -Dnexus-args=/opt/sonatype/nexus/etc/jetty/jetty.xml,/opt/sonatype/nexus/etc/jetty/jetty-http.xml,/nexus-data/etc/ssl/jetty-https.xml,/opt/sonatype/nexus/etc/jetty/jetty-requestlog.xml \
                -Dnexus.datastore.enabled=true \
                -Dnexus.datastore.nexus.jdbcUrl=\${JDBC_URL} \
                -Dnexus.datastore.nexus.username=\${DB_USER} \
                -Dnexus.datastore.nexus.password=\${DB_PWD} \
                -Dnexus.datastore.nexus.maximumPoolSize=10 \
                -Dnexus.datastore.nexus.advanced=maxLifetime=600000'
          volumeMounts:
            - name: sonatype-license-volume
              mountPath: /etc/sonatype
              readOnly: true
            - name: nexus-data-volume
              mountPath: /nexus-data
            - name: nexus-blobs-volume
              mountPath: /nexus-data/blobs
      volumes:
        #kubectl -n sonatype create secret generic sonatype-license --from-file /path/to/licenseFile
        - name: sonatype-license-volume
          secret:
            secretName: sonatype-license
        # No strong reason, but I feel NOT specifying own persistent volume for /nexus-data (and let k8s chose the underline file system) might be appropriate for the /nexus-data.
        - name: nexus-data-volume
          persistentVolumeClaim:
            claimName: nxrm3-pg-data-pvc
        - name: nexus-blobs-volume
          hostPath:
            path: ${_BLOBS_PATH%/}
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: nxrm3-pg-service
  labels:
    app: nxrm3-pg
spec:
  type: NodePort
  # For MetalLB
  #type: LoadBalancer
  #loadBalancerIP: ${_METALLB_IP}
  selector:
    app: nxrm3-pg
  ports:
    - name: nexus-webui-http
      protocol: TCP
      port: 8081
      targetPort: 8081
    - name: nexus-webui-https
      protocol: TCP
      port: 8443
      targetPort: 8443
    - name: nexus-docker-http
      protocol: TCP
      port: 4999
      targetPort: 4999
    - name: nexus-docker-https
      protocol: TCP
      port: 5000
      targetPort: 5000
